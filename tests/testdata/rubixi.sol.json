{"success": true, "error": null, "issues": [{"title": "Ether send", "description": "In the function 'collectPercentOfFees(uint256)' a non-zero amount of Ether is sent to an address taken from storage slot 5.\nThere is a check on storage index 5. This storage slot can be written to by calling the function 'DynamicPyramid()'.\n\nThere is a check on storage index 5. This storage slot can be written to by calling the function 'DynamicPyramid()'.\nThere is a check on storage index 1. This storage slot can be written to by calling the function 'fallback'.", "function": "collectPercentOfFees(uint256)", "type": "Warning", "address": 1599, "debug": "<DEBUG-DATA>", "filename": "<TEST_FILES>/rubixi.sol", "lineno": 93, "code": "creator.send(feesToCollect)"}, {"title": "Ether send", "description": "In the function 'collectAllFees()' a non-zero amount of Ether is sent to an address taken from storage slot 5.\nThere is a check on storage index 5. This storage slot can be written to by calling the function 'DynamicPyramid()'.\n\nThere is a check on storage index 5. This storage slot can be written to by calling the function 'DynamicPyramid()'.\nThere is a check on storage index 1. This storage slot can be written to by calling the function 'fallback'.", "function": "collectAllFees()", "type": "Warning", "address": 1940, "debug": "<DEBUG-DATA>", "filename": "<TEST_FILES>/rubixi.sol", "lineno": 75, "code": "creator.send(collectedFees)"}, {"title": "Exception state", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that assert() should only be used to check invariants. Use require() for regular input checking. ", "function": "nextPayoutWhenPyramidBalanceTotalsApproximately()", "type": "Informational", "address": 1653, "debug": "<DEBUG-DATA>", "filename": "<TEST_FILES>/rubixi.sol", "lineno": 131, "code": "participants[payoutOrder]"}, {"title": "Exception state", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that assert() should only be used to check invariants. Use require() for regular input checking. ", "function": "participantDetails(uint256)", "type": "Informational", "address": 2085, "debug": "<DEBUG-DATA>", "filename": "<TEST_FILES>/rubixi.sol", "lineno": 148, "code": "participants[orderInPyramid]"}, {"title": "Integer Underflow", "description": "A possible integer underflow exists in the function numberOfParticipantsWaitingForPayout().\nThe substraction may result in a value < 0.", "function": "numberOfParticipantsWaitingForPayout()", "type": "Warning", "address": 2743, "debug": "<DEBUG-DATA>", "filename": "<TEST_FILES>/rubixi.sol", "lineno": 143, "code": "participants.length - payoutOrder"}, {"title": "Unchecked CALL return value", "description": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "function": "collectPercentOfFees(uint256)", "type": "Informational", "address": 1599, "debug": "<DEBUG-DATA>", "filename": "<TEST_FILES>/rubixi.sol", "lineno": 93, "code": "creator.send(feesToCollect)"}, {"title": "Unchecked CALL return value", "description": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "function": "collectFeesInEther(uint256)", "type": "Informational", "address": 1940, "debug": "<DEBUG-DATA>", "filename": "<TEST_FILES>/rubixi.sol", "lineno": 75, "code": "creator.send(collectedFees)"}, {"title": "Unchecked CALL return value", "description": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "function": "collectFeesInEther(uint256)", "type": "Informational", "address": 2582, "debug": "<DEBUG-DATA>", "filename": "<TEST_FILES>/rubixi.sol", "lineno": 85, "code": "creator.send(_amt)"}]}